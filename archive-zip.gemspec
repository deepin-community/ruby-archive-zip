#########################################################
# This file has been automatically generated by gem2tgz #
#########################################################
# -*- encoding: utf-8 -*-
# stub: archive-zip 0.11.0 ruby lib

Gem::Specification.new do |s|
  s.name = "archive-zip".freeze
  s.version = "0.11.0"

  s.required_rubygems_version = Gem::Requirement.new(">= 0".freeze) if s.respond_to? :required_rubygems_version=
  s.require_paths = ["lib".freeze]
  s.authors = ["Jeremy Bopp".freeze, "Akira Matsuda".freeze, "Tatsuya Sato".freeze]
  s.date = "2018-01-29"
  s.description = "Archive::Zip provides a simple Ruby-esque interface to creating, extracting, and\nupdating ZIP archives.  This implementation is 100% Ruby and loosely modeled on\nthe archive creation and extraction capabilities of InfoZip's zip and unzip\ntools.\n".freeze
  s.email = ["jeremy@bopp.net".freeze, "ronnie@dio.jp".freeze, "tatsuya.b.sato@rakuten.com".freeze]
  s.files = [".yardopts".freeze, "LICENSE".freeze, "NEWS.md".freeze, "README.md".freeze, "Rakefile".freeze, "lib/archive/support/binary_stringio.rb".freeze, "lib/archive/support/integer.rb".freeze, "lib/archive/support/io-like.rb".freeze, "lib/archive/support/ioextensions.rb".freeze, "lib/archive/support/iowindow.rb".freeze, "lib/archive/support/time.rb".freeze, "lib/archive/support/zlib.rb".freeze, "lib/archive/zip.rb".freeze, "lib/archive/zip/codec.rb".freeze, "lib/archive/zip/codec/deflate.rb".freeze, "lib/archive/zip/codec/null_encryption.rb".freeze, "lib/archive/zip/codec/store.rb".freeze, "lib/archive/zip/codec/traditional_encryption.rb".freeze, "lib/archive/zip/data_descriptor.rb".freeze, "lib/archive/zip/entry.rb".freeze, "lib/archive/zip/error.rb".freeze, "lib/archive/zip/extra_field.rb".freeze, "lib/archive/zip/extra_field/extended_timestamp.rb".freeze, "lib/archive/zip/extra_field/raw.rb".freeze, "lib/archive/zip/extra_field/unix.rb".freeze, "lib/archive/zip/version.rb".freeze, "spec/archive/dos_time_spec.rb".freeze, "spec/archive/zip/archive_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/checksum_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/close_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/crc32_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/data_descriptor_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/new_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/open_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/write_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/checksum_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/close_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/crc32_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/data_descriptor_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/new_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/open_spec.rb".freeze, "spec/archive/zip/codec/deflate/fixtures/classes.rb".freeze, "spec/archive/zip/codec/deflate/fixtures/compressed_file.bin".freeze, "spec/archive/zip/codec/deflate/fixtures/compressed_file_nocomp.bin".freeze, "spec/archive/zip/codec/deflate/fixtures/raw_file.txt".freeze, "spec/archive/zip/codec/null_encryption/decrypt/close_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/new_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/open_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/read_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/rewind_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/seek_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/tell_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/close_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/new_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/open_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/rewind_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/seek_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/tell_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/write_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/fixtures/classes.rb".freeze, "spec/archive/zip/codec/null_encryption/fixtures/raw_file.txt".freeze, "spec/archive/zip/codec/store/compress/close_spec.rb".freeze, "spec/archive/zip/codec/store/compress/data_descriptor_spec.rb".freeze, "spec/archive/zip/codec/store/compress/new_spec.rb".freeze, "spec/archive/zip/codec/store/compress/open_spec.rb".freeze, "spec/archive/zip/codec/store/compress/rewind_spec.rb".freeze, "spec/archive/zip/codec/store/compress/seek_spec.rb".freeze, "spec/archive/zip/codec/store/compress/tell_spec.rb".freeze, "spec/archive/zip/codec/store/compress/write_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/close_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/data_descriptor_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/new_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/open_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/read_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/rewind_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/seek_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/tell_spec.rb".freeze, "spec/archive/zip/codec/store/fixtures/classes.rb".freeze, "spec/archive/zip/codec/store/fixtures/raw_file.txt".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/close_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/new_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/open_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/read_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/rewind_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/seek_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/tell_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/close_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/new_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/open_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/rewind_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/seek_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/tell_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/write_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/fixtures/classes.rb".freeze, "spec/archive/zip/codec/traditional_encryption/fixtures/encrypted_file.bin".freeze, "spec/archive/zip/codec/traditional_encryption/fixtures/raw_file.txt".freeze, "spec/binary_stringio/new_spec.rb".freeze, "spec/binary_stringio/set_encoding_spec.rb".freeze, "spec/ioextensions/read_exactly_spec.rb".freeze, "spec/zlib/fixtures/classes.rb".freeze, "spec/zlib/fixtures/compressed_file.bin".freeze, "spec/zlib/fixtures/compressed_file_gzip.bin".freeze, "spec/zlib/fixtures/compressed_file_huffman.bin".freeze, "spec/zlib/fixtures/compressed_file_minmem.bin".freeze, "spec/zlib/fixtures/compressed_file_minwin.bin".freeze, "spec/zlib/fixtures/compressed_file_nocomp.bin".freeze, "spec/zlib/fixtures/compressed_file_raw.bin".freeze, "spec/zlib/fixtures/raw_file.txt".freeze, "spec/zlib/zreader/checksum_spec.rb".freeze, "spec/zlib/zreader/close_spec.rb".freeze, "spec/zlib/zreader/compressed_size_spec.rb".freeze, "spec/zlib/zreader/new_spec.rb".freeze, "spec/zlib/zreader/open_spec.rb".freeze, "spec/zlib/zreader/read_spec.rb".freeze, "spec/zlib/zreader/rewind_spec.rb".freeze, "spec/zlib/zreader/seek_spec.rb".freeze, "spec/zlib/zreader/tell_spec.rb".freeze, "spec/zlib/zreader/uncompressed_size_spec.rb".freeze, "spec/zlib/zwriter/checksum_spec.rb".freeze, "spec/zlib/zwriter/close_spec.rb".freeze, "spec/zlib/zwriter/compressed_size_spec.rb".freeze, "spec/zlib/zwriter/new_spec.rb".freeze, "spec/zlib/zwriter/open_spec.rb".freeze, "spec/zlib/zwriter/rewind_spec.rb".freeze, "spec/zlib/zwriter/seek_spec.rb".freeze, "spec/zlib/zwriter/tell_spec.rb".freeze, "spec/zlib/zwriter/uncompressed_size_spec.rb".freeze, "spec/zlib/zwriter/write_spec.rb".freeze]
  s.homepage = "http://github.com/javanthropus/archive-zip".freeze
  s.licenses = ["MIT".freeze]
  s.rubyforge_project = "archive-zip".freeze
  s.rubygems_version = "2.7.6".freeze
  s.summary = "Simple, extensible, pure Ruby ZIP archive support.".freeze
  s.test_files = ["spec/archive/dos_time_spec.rb".freeze, "spec/archive/zip/archive_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/checksum_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/close_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/crc32_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/data_descriptor_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/new_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/open_spec.rb".freeze, "spec/archive/zip/codec/deflate/compress/write_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/checksum_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/close_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/crc32_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/data_descriptor_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/new_spec.rb".freeze, "spec/archive/zip/codec/deflate/decompress/open_spec.rb".freeze, "spec/archive/zip/codec/deflate/fixtures/classes.rb".freeze, "spec/archive/zip/codec/deflate/fixtures/compressed_file.bin".freeze, "spec/archive/zip/codec/deflate/fixtures/compressed_file_nocomp.bin".freeze, "spec/archive/zip/codec/deflate/fixtures/raw_file.txt".freeze, "spec/archive/zip/codec/null_encryption/decrypt/close_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/new_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/open_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/read_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/rewind_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/seek_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/decrypt/tell_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/close_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/new_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/open_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/rewind_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/seek_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/tell_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/encrypt/write_spec.rb".freeze, "spec/archive/zip/codec/null_encryption/fixtures/classes.rb".freeze, "spec/archive/zip/codec/null_encryption/fixtures/raw_file.txt".freeze, "spec/archive/zip/codec/store/compress/close_spec.rb".freeze, "spec/archive/zip/codec/store/compress/data_descriptor_spec.rb".freeze, "spec/archive/zip/codec/store/compress/new_spec.rb".freeze, "spec/archive/zip/codec/store/compress/open_spec.rb".freeze, "spec/archive/zip/codec/store/compress/rewind_spec.rb".freeze, "spec/archive/zip/codec/store/compress/seek_spec.rb".freeze, "spec/archive/zip/codec/store/compress/tell_spec.rb".freeze, "spec/archive/zip/codec/store/compress/write_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/close_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/data_descriptor_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/new_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/open_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/read_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/rewind_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/seek_spec.rb".freeze, "spec/archive/zip/codec/store/decompress/tell_spec.rb".freeze, "spec/archive/zip/codec/store/fixtures/classes.rb".freeze, "spec/archive/zip/codec/store/fixtures/raw_file.txt".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/close_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/new_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/open_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/read_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/rewind_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/seek_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/decrypt/tell_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/close_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/new_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/open_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/rewind_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/seek_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/tell_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/encrypt/write_spec.rb".freeze, "spec/archive/zip/codec/traditional_encryption/fixtures/classes.rb".freeze, "spec/archive/zip/codec/traditional_encryption/fixtures/encrypted_file.bin".freeze, "spec/archive/zip/codec/traditional_encryption/fixtures/raw_file.txt".freeze, "spec/binary_stringio/new_spec.rb".freeze, "spec/binary_stringio/set_encoding_spec.rb".freeze, "spec/ioextensions/read_exactly_spec.rb".freeze, "spec/zlib/fixtures/classes.rb".freeze, "spec/zlib/fixtures/compressed_file.bin".freeze, "spec/zlib/fixtures/compressed_file_gzip.bin".freeze, "spec/zlib/fixtures/compressed_file_huffman.bin".freeze, "spec/zlib/fixtures/compressed_file_minmem.bin".freeze, "spec/zlib/fixtures/compressed_file_minwin.bin".freeze, "spec/zlib/fixtures/compressed_file_nocomp.bin".freeze, "spec/zlib/fixtures/compressed_file_raw.bin".freeze, "spec/zlib/fixtures/raw_file.txt".freeze, "spec/zlib/zreader/checksum_spec.rb".freeze, "spec/zlib/zreader/close_spec.rb".freeze, "spec/zlib/zreader/compressed_size_spec.rb".freeze, "spec/zlib/zreader/new_spec.rb".freeze, "spec/zlib/zreader/open_spec.rb".freeze, "spec/zlib/zreader/read_spec.rb".freeze, "spec/zlib/zreader/rewind_spec.rb".freeze, "spec/zlib/zreader/seek_spec.rb".freeze, "spec/zlib/zreader/tell_spec.rb".freeze, "spec/zlib/zreader/uncompressed_size_spec.rb".freeze, "spec/zlib/zwriter/checksum_spec.rb".freeze, "spec/zlib/zwriter/close_spec.rb".freeze, "spec/zlib/zwriter/compressed_size_spec.rb".freeze, "spec/zlib/zwriter/new_spec.rb".freeze, "spec/zlib/zwriter/open_spec.rb".freeze, "spec/zlib/zwriter/rewind_spec.rb".freeze, "spec/zlib/zwriter/seek_spec.rb".freeze, "spec/zlib/zwriter/tell_spec.rb".freeze, "spec/zlib/zwriter/uncompressed_size_spec.rb".freeze, "spec/zlib/zwriter/write_spec.rb".freeze]

  if s.respond_to? :specification_version then
    s.specification_version = 4

    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then
      s.add_development_dependency(%q<github-markup>.freeze, ["~> 1.6"])
      s.add_runtime_dependency(%q<io-like>.freeze, ["~> 0.3.0"])
      s.add_development_dependency(%q<minitest>.freeze, ["~> 5.11"])
      s.add_development_dependency(%q<rake>.freeze, ["~> 12.3"])
      s.add_development_dependency(%q<redcarpet>.freeze, ["~> 3.4"])
      s.add_development_dependency(%q<yard>.freeze, ["~> 0.9.12"])
    else
      s.add_dependency(%q<github-markup>.freeze, ["~> 1.6"])
      s.add_dependency(%q<io-like>.freeze, ["~> 0.3.0"])
      s.add_dependency(%q<minitest>.freeze, ["~> 5.11"])
      s.add_dependency(%q<rake>.freeze, ["~> 12.3"])
      s.add_dependency(%q<redcarpet>.freeze, ["~> 3.4"])
      s.add_dependency(%q<yard>.freeze, ["~> 0.9.12"])
    end
  else
    s.add_dependency(%q<github-markup>.freeze, ["~> 1.6"])
    s.add_dependency(%q<io-like>.freeze, ["~> 0.3.0"])
    s.add_dependency(%q<minitest>.freeze, ["~> 5.11"])
    s.add_dependency(%q<rake>.freeze, ["~> 12.3"])
    s.add_dependency(%q<redcarpet>.freeze, ["~> 3.4"])
    s.add_dependency(%q<yard>.freeze, ["~> 0.9.12"])
  end
end
